class Solution:
    def floodFill(self, image, sr, sc, newColor):
        n = len(image)
        m = len(image[0])
        visited = [[0]*m for i in range(n)]

        def dfs(row, col, c) :
            if visited[row][col] == 0 and image[row][col] == c:
                visited[row][col] = 1
                image[row][col] = newColor
                dx = [0, -1, 0, 1 ]
                dy = [-1, 0, 1, 0 ]
                for i in range(4) :
                    x = row + dx[i]
                    y = col + dy[i] 
                    if 0<= x < n and 0<= y < m and visited[x][y] == 0 :
                        dfs(x, y, c) 
                    
            
        dfs(sr, sc, image[sr][sc])
        return image


''' time complexity : O(n^2)        DFS
    space complexity : O(n^2)
'''
