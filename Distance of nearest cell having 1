from collections import deque
class Solution:
	def nearest(self, grid):
		n = len(grid)
		m = len(grid[0])
		visited = [[0] * m for _ in range(n)]
		dist = [[0] * m for _ in range(n)]
		q = deque()
		for i in range(n) :
		    for j in range(m) :
		        if grid[i][j] == 1 :
		            q.append((i,j,0))
		            
        dx = (0, 1, 0, -1)
        dy = (1, 0, -1, 0)
        while q :
            row, col, step = q.popleft()
            if visited[row][col] == 0 :
                visited[row][col] = 1
                dist[row][col] = step 
                for i in range(4) :
                    nrow = row + dx[i]
                    ncol = col + dy[i]
                    if 0<=nrow<n and 0<=ncol<m and visited[nrow][ncol] == 0 :
                        q.append((nrow, ncol, step+1))
        return dist
            
''' time complexity : O(n*m)
    space complexity : O(n*m)
'''
