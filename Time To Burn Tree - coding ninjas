class BinaryTreeNode :
	def __init__(self, data) :
		self.data = data
		self.left = None
		self.right = None



def timeToBurnTree(root, start):     
    parentSet = dict()
    def getParentSet(root, parentSet, start) :
        target = None 
        q = [root]
        while q :
            n = len(q)
            for i in range(n) :
                node = q.pop(0)
                if node :
                    if node.data == start :
                        target = node 
                    if node.left :
                        parentSet[node.left] = node
                        q.append(node.left)
                    if node.right :
                        parentSet[node.right] = node 
                        q.append(node.right)
        return target
    
    target = getParentSet(root, parentSet, start)



    res = 0
    q = [target]
    visited = set()
    visited.add(target)
    while q :
        n = len(q) 
        flag = False 
        for i in range(n) :
            node = q.pop(0)            
            if node : 
                if node.left and node.left not in visited :
                    q.append(node.left)
                    visited.add(node.left)
                    flag = True 
                if node.right and node.right not in visited :
                    q.append(node.right)
                    visited.add(node.right)
                    flag = True
                if node in parentSet and parentSet[node] not in visited :
                    q.append(parentSet[node])
                    visited.add(parentSet[node])
                    flag = True
        if flag :
            res += 1
    return res


''' time complexity : O(n)
    space complexity : O(n)
'''
