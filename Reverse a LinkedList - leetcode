# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head :
            return 
        stack = []
        while head :
            stack.append(head.val)
            head = head.next

        # print(stack)
        
        temp = head1 = ListNode(stack.pop())
        while stack :
            temp1 = ListNode(stack.pop())
            head1.next = temp1
            head1 = temp1

        return temp


##########################################################################################


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev, curr = None, head

        while curr :
            temp = curr.next 
            curr.next = prev
            prev = curr
            curr = temp 

        return prev
