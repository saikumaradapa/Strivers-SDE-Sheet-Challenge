# DFS

import sys
sys.setrecursionlimit(10**8)
class Solution:
    def numIslands(self,grid):
        n = len(grid)
        m = len(grid[0])
        visited = [[0] * (m) for i in range(n)]
    
        def dfs(row, col):
            if visited[row][col] == 0:
                visited[row][col] = 1
                for delrow in range(-1, 2, 1) :
                    for delcol in range(-1, 2, 1) :
                        nrow = row + delrow
                        ncol = col + delcol
                        if (0<=nrow<n) and (0<=ncol<m) and visited[nrow][ncol]==0 and grid[nrow][ncol]==1 :
                            dfs(nrow, ncol)
    
        res = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1 and visited[i][j] == 0:
                    res += 1
                    dfs(i, j)
    
        return res
        
''' time complexity : O(n^2)    DFS traversal 
    space complexity : O(n^2)
'''


####################################################################################################################################################################################################################################


# BFS

import sys
sys.setrecursionlimit(10**8)
class Solution:
    def numIslands(self,grid):
        n = len(grid)
        m = len(grid[0])
        visited = [[0] * (m) for i in range(n)]
    
        def bfs(row, col):
            if visited[row][col] == 0:
                q = [(row, col)]
                while q :
                    row, col = q.pop(0)
                    visited[row][col] = 1
                    for delrow in range(-1, 2, 1) :
                        for delcol in range(-1, 2, 1) :
                            nrow = row + delrow
                            ncol = col + delcol
                            if (0<=nrow<n) and (0<=ncol<m) and visited[nrow][ncol]==0 and grid[nrow][ncol]==1 :
                                visited[nrow][ncol] = 1
                                q.append((nrow, ncol))
    
        res = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1 and visited[i][j] == 0:
                    res += 1
                    bfs(i, j)
    
        return res
        
''' time complexity : O(n^2)    BFS traversal 
    space complexity : O(n^2)
'''

